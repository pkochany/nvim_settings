# ===== SQL =====
snippet sql_add_column "Add column to table."
ALTER TABLE ${1:table}
ADD COLUMN ${2:column} ${3:data_type};
endsnippet

snippet sql_add_foreign_key "Add foreign key to database table."
ALTER TABLE ${1:table} ADD COLUMN ${2:idcolumn} INT REFERENCES ${3:table2}(id);
endsnippet

snippet sql_changetype "Change column type in a table."
ALTER TABLE ${1:table}
ALTER COLUMN ${2:column} TYPE ${3:data_type};
endsnippet

snippet sql_default "Change or remove default value from column."
ALTER TABLE ${1:table} ALTER COLUMN ${2:column} ${3:SET DEFAULT default_value} ${4:DROP DEFAULT};
endsnippet

snippet sql_dropcolumn "Drop column from table."
ALTER TABLE ${1:table}
DROP COLUMN ${2:column};
endsnippet

snippet sql_FDMcreatetable "Creating table for FDM with 1 relation (pacj)."
CREATE TABLE ${1:table} (
    id SERIAL PRIMARY KEY,
    bool BOOLEAN DEFAULT true,
    date TIMESTAMP WITHOUT TIME ZONE,
    integer INTEGER,
    def_now TIMESTAMP WITHOUT TIME ZONE DEFAULT now(),
    varchar CHARACTER VARYING(100),
    text TEXT,

    FOREIGN KEY (key_in_this_table) REFERENCES public.some_other_table (key_in_some_other_table),
);
endsnippet

snippet sql_insertinto "Insert into."
INSERT INTO table (${1:column_1}, ${2:column_2})
VALUES (${3:data_1}, ${4:data_2});
endsnippet

snippet sql_update "Update."
UPDATE ${1:table}
SET ${2:column_1} = ${3:value_1}, ${4:column_2} = ${5:value2}
WHERE ${6:condition};
endsnippet


# ===== ORM =====
snippet yml_orm_manyToMany "Doctrine many to many sample."
manyToMany:
    ${1:entityName}
    targetEntity: ${2:xxx/xxx}
        joinTable:
            name: ${3:connecting_table}
	    joinColumns:
                ${4:current_foreign_key}:
                    referencedColumnName: ${5:referenced_key}
            inverseJoinColumns:
                ${6:target_foreign_key}:
                    referencedColumnName: ${7:target_key}
        cascade: [persist]
endsnippet

snippet yml_orm_manyToOne "Doctrine many to one sample."
manyToOne:
  ${1:connection_name}:
    targetEntity: ${2:xxx/xxx}
    joinColumn: { name: ${3:foreign_key} }
    inversedBy: ${4:inversed_connection_name}
endsnippet

snippet yml_orm_oneToMany "Doctrine one to many sample."
oneToMany:
  ${1:connection_name}:
    targetEntity: ${2:xxx/xxx}
    mappedBy: ${3:inversed_connection_name}
endsnippet


# ===== XML WRITER =====
snippet xml_writer_attribute "Add attribute."
$xml->writeAttribute(${1:attribute_name}, ${2:attribute_value});
endsnippet

snippet xml_writer_attribute_ns "Add namespace attribute."
$xml->writeAttributeNs(${1:attribute_name}, ${2:attribute_value}, ${3:namespace}, ${4:uri});
endsnippet

snippet xml_writer_block "Add block."
$xml->startElement(${1:element_name});
    $xml->writeAttribute(${2:attribute_name}, ${3:attribute_value});
    $xml->writeAttribute(${4:attribute_name}, ${5:attribute_value});
$xml->endElement(); // end of ${1:element_name}
endsnippet

snippet xml_writer_block_ns "Add namespace block."
$xml->startElementNs(${1:attribute_name}, ${2:attribute_value}, ${3:namespace});
    $xml->writeAttributeNs(${4:attribute_name}, ${5:attribute_value}, ${6:namespace}, ${7:uri});
$xml->endElement(); // end of ${1:attribute_name}
endsnippet


# ===== JQUERY =====
snippet jq_document_ready "jQuery document ready function"
$(document).ready(function() {

});
endsnippet

snippet jq_ajax_call "jQuery Ajax call function"
$('.edytuj').click(function(e){
    var ${1:$variable_1} = ;
    var ${2:$variable_2} = ; 

    $.ajax({
        url: ${3:url},
        method: ${4:"POST"},
        data: {
            ${5:req_data_1}: ${1:$variable_1},
            ${6:req_data_2}: ${2:$variable_2}
        },
        success: function (html) {
            ${7:target_element}.html(html);
        }
    });
});
endsnippet
